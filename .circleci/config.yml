version: 2
jobs:
  # tests:
  #   working_directory: ~/circulate
  #   docker:
  #     - image: circleci/python:2.7
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         key: deps-a-{{ .Branch }}-{{ checksum "requirements.txt" }}
  #     - run:
  #         name: Install requirements.txt
  #         command: |
  #           pip install virtualenv
  #           virtualenv venv
  #           . venv/bin/activate
  #           pip install -r requirements.txt
  #     - save_cache:
  #         key: deps-a-{{ .Branch }}-{{ checksum "requirements.txt" }}
  #         paths:
  #           - "venv"
  #     - run:
  #         name: Run tests that do not depend on ES
  #         command: |
  #           . venv/bin/activate
  #           python -m pytest
      # - store_artifacts:
          # path: test-reports/
          # destination: tr1
      # - store_test_results:
          # path: test-reports/

  
  deploy:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    environment:
      #ES_GRAPH_URL gets substituted by our CI for production
      GOOGLE_PROJECT_ID: open-targets-library
      ES_MAIN_URL: 'http://be-es-debian-3n-node01:39200,http://be-es-debian-3n-node02:39200,http://be-es-debian-3n-node03:39200'
      ES_GRAPH_URL: 'http://be-es-debian-3n-node01:39200'
    steps:
      - checkout
      - run:
          name: install jq & envsubst
          command: apt-get install -y jq gettext-base && jq --version

      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run:
          name: Make an app.yaml
          command: |
            #make it available
            echo -e "\n\n### Substituting the ES_URL into the app.yaml \n\n"
            envsubst < app.template.yaml > app.yaml

      - run:
          name: Deploy branch to google AppEngine
          no_output_timeout: 30m
          command: |
            if [ -n "${CIRCLE_TAG:+1}" ]; then
              echo -e "deploying tag ${CIRCLE_TAG}"
              gcloud app deploy --version $CIRCLE_TAG --project ${GOOGLE_PROJECT_ID}
            elif [ -n "${CIRCLE_BRANCH:+1}" ]; then
              ## branch tag and push
              echo -e "deploying branch ${CIRCLE_BRANCH} for testing"
              gcloud app deploy --no-promote --version $CIRCLE_BRANCH --project ${GOOGLE_PROJECT_ID}
            else
              echo -e "### No CIRCLE_TAG or CIRCLE_BRANCH defined"
              exit 1
            fi



  api-tests:
    docker:
      - image: python:2.7
    environment:
      GOOGLE_PROJECT_ID: open-targets-library
    steps:
      - checkout
      - run:
          name: Install requests library
          command: pip install requests
      - run:
          name: Trigger runscope tests on deployed branch
          command: |
            set -o allexport
            python .circleci/runscope.py

  stop-instance:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    environment:
      GOOGLE_PROJECT_ID: open-targets-library
    steps:
      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run:
          name: Stop running version (if master)
          command: |
            gcloud --project ${GOOGLE_PROJECT_ID} app versions stop $CIRCLE_BRANCH --service=default





workflows:
  version: 2
  deploy-and-test:
    jobs:
      # This is really confusing: check https://circleci.com/docs/2.0/workflows/#git-tag-job-execution
      # - For a branch push unaffected by any filters, CircleCI runs the job.
      # - For a tag push unaffected by any filters, CircleCI skips the job.
      # - a job must have a filters tags section to run as a part of a tag push
      # - all its transitively dependent jobs must also have a filters tags
      # Also see https://discuss.circleci.com/t/build-required-steps-automatically-for-tag-filtered-workflows/15185

      - deploy:
          filters:
            tags:
              only: /^prod.*/
      - api-tests:
          requires:
            - deploy
          filters:
            tags:
              only: /^prod.*/
      - stop-instance:
          requires:
            - api-tests
          filters:
            branches:
              ignore: master
